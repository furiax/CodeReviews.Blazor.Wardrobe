@page "/edit-clothpiece"
@page "/edit-clothpiece/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@if(Id == null)
{
    <h3>Add Clothpiece</h3>
}
else
{
    <h3>Edit Clothpiece</h3>
}

<EditForm Model="Cloth" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div>
        <label for="type">Type</label>
        <InputSelect id="type" @bind-Value="Cloth.Type" class="form-control">
            @foreach (ClothType type in Enum.GetValues(typeof(ClothType)))
            {
                <option value="@type">@type.ToString()</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="color">Color</label>
        <InputText id="color" @bind-Value="Cloth.Color" class="form-control" />
        <ValidationMessage For="@(()=> Cloth.Color)" />
    </div>
    <div>
        <label for="brand">Brand</label>
        <InputText id="brand" @bind-Value="Cloth.Brand" class="form-control" />
        <ValidationMessage For="@(()=> Cloth.Brand)" />
    </div>
    <div>
        <label for="imageChoice">Add Image</label>
        <InputSelect id="imageChoice" @bind-Value="ImageChoice" class="form-control">
            <option value="url">URL</option>
            <option value="upload">Upload Image</option>
            <option value="none">No picture</option>
        </InputSelect>
    </div>
    @if (ImageChoice == "url")
    {
        <div>
            <label for="image">Image URL</label>
            <InputText id="image" @bind-Value="Cloth.Image" class="form-control"></InputText>
        </div>
    }
    else if (ImageChoice == "upload")
    {
        <div>
            <label for="imageUpload">Upload image (Max 10Mb)</label>
            <InputFile id="imageUpload" OnChange="HandleImageUpload" />
        </div>
    }

    <button type="submit" class="btn btn-primary">Save</button>

    @if (!string.IsNullOrEmpty(Cloth.Image))
    {
        <div>
            <img src="@Cloth.Image" style="width: 300px; height:300px" />
        </div>
    } 
</EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }

    public Clothpiece Cloth { get; set; } = new Clothpiece();
    public string ImageChoice { get; set; } = "url";

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var result = await Http.GetFromJsonAsync<Clothpiece>($"api/wardrobe/{Id}");
            if (result is not null)
                Cloth = result;
        }
    }
    async Task HandleSubmit()
    {
        if(ImageChoice == "none")
        {
            Cloth.Image = "img/shirt-50.png";
        }
        HttpResponseMessage result;
        if(Id is not null)
        {
            result= await Http.PutAsJsonAsync($"api/wardrobe/{Id}", Cloth);
        }
        else
        {
            result = await Http.PostAsJsonAsync($"api/wardrobe", Cloth);
        }

        if(result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.Error.WriteLine($"Error occured: {result.ReasonPhrase}");
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var maxAllowedSize = 10485760;

        var formFileContent = new MultipartFormDataContent();
        var streamContent = new StreamContent(file.OpenReadStream(maxAllowedSize));
        formFileContent.Add(streamContent, "file", file.Name);

        var response = await Http.PostAsync("api/wardrobe/upload", formFileContent);

        if(response.IsSuccessStatusCode)
        {
            var imageUrl = await response.Content.ReadAsStringAsync();
            Cloth.Image = imageUrl;
        }
        else
        {
            Console.Error.WriteLine($"Error uploading file: {response.ReasonPhrase}");
        }
    }
}

